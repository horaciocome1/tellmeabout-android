package io.github.horaciocome1.factsai

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.SideEffect
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen
import androidx.core.view.WindowCompat
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.google.accompanist.systemuicontroller.rememberSystemUiController
import com.google.firebase.analytics.FirebaseAnalytics
import com.google.firebase.perf.metrics.AddTrace
import com.ramcosta.composedestinations.DestinationsNavHost
import com.ramcosta.composedestinations.manualcomposablecalls.composable
import dagger.hilt.android.AndroidEntryPoint
import io.github.horaciocome1.factsai.ui.screens.EnterTopicScreen
import io.github.horaciocome1.factsai.ui.screens.EnterTopicViewModel
import io.github.horaciocome1.factsai.ui.screens.FactsScreen
import io.github.horaciocome1.factsai.ui.screens.FactsViewModel
import io.github.horaciocome1.factsai.ui.screens.NavGraphs
import io.github.horaciocome1.factsai.ui.screens.destinations.EnterTopicScreenDestination
import io.github.horaciocome1.factsai.ui.screens.destinations.FactsScreenDestination
import io.github.horaciocome1.factsai.ui.theme.FactsAITheme
import io.github.horaciocome1.factsai.util.AppStateAnalytics
import io.github.horaciocome1.factsai.util.AppStateAnalyticsImpl
import kotlinx.coroutines.launch
import timber.log.Timber
import javax.inject.Inject

@AndroidEntryPoint
class MainActivity : ComponentActivity(), AppStateAnalytics by AppStateAnalyticsImpl() {

    @Inject
    lateinit var analytics: FirebaseAnalytics

    @OptIn(ExperimentalFoundationApi::class)
    @AddTrace(name = "MainActivity:onCreate")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        installSplashScreen()

        Timber.i("onCreate")
        registerAppStateAnalytics(this, analytics)

        WindowCompat.setDecorFitsSystemWindows(window, false)

        setContent {
            FactsAITheme(darkTheme = true) {
                val systemUiController = rememberSystemUiController()

                SideEffect {
                    systemUiController.setSystemBarsColor(
                        color = Color.Transparent,
                        darkIcons = false,
                    )
                }

                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.surface,
                ) {
                    val context = LocalContext.current

                    DestinationsNavHost(
                        navGraph = NavGraphs.root,
                        modifier = Modifier.fillMaxSize(),
                    ) {
                        composable(EnterTopicScreenDestination) {
                            val viewModel = hiltViewModel<EnterTopicViewModel>()

                            val loading by viewModel.loading.collectAsStateWithLifecycle()
                            val error by viewModel.error.collectAsStateWithLifecycle()
                            val factsGenerated by viewModel.factsGenerated.collectAsStateWithLifecycle(
                                initialValue = false,
                            )

                            LaunchedEffect(factsGenerated) {
                                if (factsGenerated) {
                                    destinationsNavigator.navigate(FactsScreenDestination.route)
                                }
                            }

                            EnterTopicScreen(
                                loading = loading,
                                error = error,
                                topic = viewModel.topic,
                                onTopicChange = viewModel::onTopicChange,
                                generateFacts = {
                                    viewModel.generateFacts(context)
                                },
                            )
                        }

                        composable(FactsScreenDestination) {
                            val viewModel = hiltViewModel<FactsViewModel>()

                            val coroutineScope = rememberCoroutineScope()
                            val pagerState = rememberPagerState()

                            val facts by viewModel.facts.collectAsStateWithLifecycle()
                            val loading by viewModel.loading.collectAsStateWithLifecycle()
                            val stale by viewModel.stale.collectAsStateWithLifecycle()

                            val readingLastFact by remember {
                                derivedStateOf { pagerState.currentPage == facts.lastIndex }
                            }

                            LaunchedEffect(pagerState.currentPage) {
                                viewModel.onFactRead(pagerState.currentPage, context)
                            }

                            FactsScreen(
                                pagerState = pagerState,
                                showLoading = loading,
                                showHint = stale && !readingLastFact && !pagerState.isScrollInProgress,
                                showClose = !pagerState.isScrollInProgress,
                                facts = facts,
                                onNextFact = {
                                    coroutineScope.launch {
                                        pagerState.animateScrollToPage(pagerState.currentPage + 1)
                                    }
                                },
                                onClose = destinationsNavigator::navigateUp,
                            )
                        }
                    }
                }
            }
        }
    }
}
