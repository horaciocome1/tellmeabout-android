package io.github.horaciocome1.factsai.ui.screens

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.statusBars
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.windowInsetsPadding
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.ripple.rememberRipple
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.ramcosta.composedestinations.annotation.Destination
import com.ramcosta.composedestinations.annotation.RootNavGraph
import com.ramcosta.composedestinations.navigation.DestinationsNavigator
import io.github.horaciocome1.factsai.R
import io.github.horaciocome1.factsai.ui.components.Background
import io.github.horaciocome1.factsai.ui.screens.EnterTopicScreenViewModel.Companion.MAX_TOPIC_LENGTH
import io.github.horaciocome1.factsai.ui.screens.destinations.EnterMobileNumberScreenDestination
import io.github.horaciocome1.factsai.ui.screens.destinations.FactsScreenDestination
import io.github.horaciocome1.factsai.ui.theme.FactsAITheme
import io.github.horaciocome1.factsai.util.FakeDestinationsNavigator

@RootNavGraph(start = true)
@Destination
@Composable
fun EnterTopicScreen(
    navigator: DestinationsNavigator,
    viewModel: EnterTopicScreenViewModel = hiltViewModel(),
) {
    val focusManager = LocalFocusManager.current

    val loading by viewModel.loading.collectAsStateWithLifecycle()
    val error by viewModel.error.collectAsStateWithLifecycle()
    val factsGenerated by viewModel.factsGenerated.collectAsStateWithLifecycle()
    val userSignedIn by viewModel.userSignedIn.collectAsStateWithLifecycle()

    LaunchedEffect(factsGenerated) {
        if (factsGenerated) {
            navigator.navigate(FactsScreenDestination(viewModel.topic))
        }
    }

    LaunchedEffect(error) {
        // TODO: show error
    }

    Background(onClick = focusManager::clearFocus) {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center,
        ) {
            Text(
                text = stringResource(id = R.string.tell_me_about),
                style = MaterialTheme.typography.headlineLarge.copy(
                    color = MaterialTheme.colorScheme.primary,
                ),
                modifier = Modifier
                    .align(Alignment.Start)
                    .padding(horizontal = 32.dp),
            )
            OutlinedTextField(
                value = viewModel.topic,
                onValueChange = viewModel::onTopicChanged,
                singleLine = true,
                supportingText = {
                    val annotatedString = buildAnnotatedString {
                        append(stringResource(id = R.string.enter_a_topic_to_get_started))
                        append(" ")
                        append(stringResource(id = R.string.for_example))
                        append(", '")
                        withStyle(
                            style = SpanStyle(
                                color = MaterialTheme.colorScheme.primary.copy(
                                    alpha = 0.5f,
                                ),
                            ),
                        ) {
                            append(stringResource(id = R.string.cats))
                        }
                        append("' ")
                        append(stringResource(id = R.string.or))
                        append(" '")
                        withStyle(
                            style = SpanStyle(
                                color = MaterialTheme.colorScheme.primary.copy(
                                    alpha = 0.5f,
                                ),
                            ),
                        ) {
                            append(stringResource(id = R.string.african_families))
                        }
                        append("'.")
                    }
                    Text(
                        text = annotatedString,
                        style = MaterialTheme.typography.labelLarge.copy(
                            color = MaterialTheme.colorScheme.primary.copy(
                                alpha = 0.3f,
                            ),
                        ),
                    )
                },
                suffix = {
                    Text(
                        text = "${viewModel.topic.length}/$MAX_TOPIC_LENGTH",
                        style = MaterialTheme.typography.labelSmall.copy(
                            color = MaterialTheme.colorScheme.primary.copy(
                                alpha = 0.3f,
                            ),
                        ),
                    )
                },
                textStyle = MaterialTheme.typography.bodyLarge.copy(
                    color = MaterialTheme.colorScheme.primary,
                ),
                shape = MaterialTheme.shapes.small,
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = MaterialTheme.colorScheme.primary.copy(
                        alpha = 0.3f,
                    ),
                    disabledBorderColor = MaterialTheme.colorScheme.primary.copy(
                        alpha = 0.1f,
                    ),
                ),
                enabled = !loading,
                keyboardOptions = KeyboardOptions(
                    imeAction = ImeAction.Go,
                ),
                keyboardActions = KeyboardActions(
                    onGo = {
                        viewModel.generateFacts()
                        focusManager.clearFocus()
                    },
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(
                        start = 24.dp,
                        top = 16.dp,
                        end = 24.dp,
                    ),
            )
            Spacer(modifier = Modifier.height(100.dp))
            Button(
                onClick = viewModel::generateFacts,
                enabled = !loading && viewModel.topic.isNotBlank(),
            ) {
                Text(
                    text = stringResource(id = R.string.get_started),
                    style = MaterialTheme.typography.bodyLarge,
                )
                AnimatedVisibility(visible = loading) {
                    CircularProgressIndicator(
                        modifier = Modifier
                            .height(16.dp)
                            .width(32.dp)
                            .padding(start = 16.dp)
                            .align(Alignment.CenterVertically),
                        color = MaterialTheme.colorScheme.primary,
                        strokeWidth = 2.dp,
                    )
                }
            }
        }
        Row(
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .align(Alignment.TopEnd)
                .padding(top = 32.dp, end = 40.dp)
                .windowInsetsPadding(WindowInsets.statusBars)
                .clip(CircleShape)
                .clickable(
                    interactionSource = remember { MutableInteractionSource() },
                    indication = rememberRipple(),
                    onClick = {
                        navigator.navigate(EnterMobileNumberScreenDestination)
                    },
                ),
        ) {
            AnimatedVisibility(visible = !userSignedIn) {
                Text(
                    text = stringResource(id = R.string.login),
                    style = MaterialTheme.typography.bodyLarge.copy(
                        color = MaterialTheme.colorScheme.primary,
                        fontWeight = FontWeight.Bold,
                    ),
                )
            }
            Image(
                painter = painterResource(id = R.drawable.user),
                contentDescription = "User account icon",
                contentScale = ContentScale.Fit,
                colorFilter = ColorFilter.tint(
                    color = MaterialTheme.colorScheme.primary,
                ),
                modifier = Modifier
                    .size(32.dp)
                    .clip(CircleShape)
                    .border(
                        width = 2.dp,
                        color = MaterialTheme.colorScheme.primary,
                        shape = CircleShape,
                    ),
            )
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun EnterTopicScreenPreview() {
    FactsAITheme(darkTheme = true) {
        EnterTopicScreen(
            navigator = FakeDestinationsNavigator,
        )
    }
}
